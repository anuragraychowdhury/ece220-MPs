; Table of register use in this part of the code:
;    R0 is used as a temporary register to print values to the moniter
;    R1 used as a counter to point to the current address in the string
;       and as the loop count
;    R2 used as a counter to track the number of characters printed in each row
;    R3 holds the starting address of the histogram and is used as a counter to
;              track the number of bits in the hex value being printed
;    R4 holds the value in the histogram of the current address and is used to move
;              bits into the register holding each seperate hex value
;    R5 holds the current hex value being calculated
;    R6 is used as a temporary register and to transform the hex value in R5 into a
;              ASCII value to be printed
 
 
 
AND R0,R0,#0                  ; initialize R0 to a value of 0
AND R1,R1,#0                  ; initialize counter to a value of zero
 
BIGLOOP ADD R1,R1,#-15       ; subtract 15 from R1 to test if counter is done
ADD R1,R1,#-12                ; subtract 12 from R1 to test if counter is done
BRz DONE                             ; go to end of program when counter gets to zero
ADD R1,R1,#15                 ; add 15 to R1 to restore value as counter
ADD R1,R1,#12                 ; add 12 to R1 to restore value as counter
 
AND R3,R3,#0                  ; initialize R3 to a value of 0
LD R3,HIST_ADDR                      ; load starting address of histogram into R3
ADD R3,R3,R1                  ; add counter to R3 to assess correct address
AND R0,R0,#0                  ; initialize R0 to a value of 0
ADD R0,R0,#15                 ; add 15 to R0 to form ASCII character
ADD R0,R0,#15                 ; add 15 to R0 to form ASCII character
ADD R0,R0,#15                 ; add 15 to R0 to form ASCII character
ADD R0,R0,#15                 ; add 15 to R0 to form ASCII character
ADD R0,R0,#4                  ; add 4 to R0 to form ASCII character
ADD R0,R0,R1                  ; add counter to R0 to form ASCII character
OUT                                          ; print ASCII character to monitor
AND R0,R0,#0                  ; initialize R0 to a value of 0
ADD R0,R0,#15                 ; add 15 to R0 to form ASCII character
ADD R0,R0,#15                 ; add 15 to R0 to form ASCII character
ADD R0,R0,#2                  ; add 2 to R0 to form ASCII character
OUT                                          ; print ASCII character to monitor
AND R0,R0,#0                  ; initialize R0 to a value of 0
LDR R4,R3,#0                  ; load decimal of count for the letter into R4
AND R5,R5,#0                  ; initialize R5 to a value of 0
AND R2,R2,#0                  ; initialize R2 to a value of 0
AND R6,R6,#0                  ; initialize R6 to a value of 0
ADD R2,R2,#4                  ; set counter R2 to 4
ADD R1,R1,#1                  ; increment counter in R1
 
PRINT_NEX_NUM BRz BIGLOOP    ; branch to BIGLOOP when done with line
AND R3,R3,#0                  ; initialize R3 to a value of 0
ADD R3,R3,#4                  ; set counter R3 to 4
 
NEXT_BIT                             ; start of loop to place first Hex value into R5
ADD R5,R5,R5                  ; left shift R5 one bit
AND R6,R6,#0                  ; initialize R6 to a value of 0
AND R6,R4,R4                  ; set R6 equal to R4 to set condition codes
BRzp SKIP                            ; branch to SKIP if there is not a 1
ADD R5,R5,#1                  ; add value of 1 to R5
SKIP                                 ; branch location to skip incrementing R5
ADD R4,R4,R4                  ; left shift R4 one bit
ADD R3,R3,#-1                 ; decrement counter R3 by 1
BRz PRINT_VALUE                      ; if counter at zero print the hex value
BRnzp NEXT_BIT                ; otherwise continue to calculate R5
 
PRINT_VALUE                          ; start of printing hex value
 
AND R6,R6,#0                  ; intitialize R6 to a value of 0
ADD R6,R5,#-9                 ; test to see if hex value is larger than 9
BRnz NEXT                            ; if smaller than 9 then branch to next
ADD R6,R6,#7                  ; add ascii value of 7 if hex value greater then 9
NEXT                                 ; branch location skipping alteration of ascii value
ADD R6,R6,#9                  ; reinserting the previously subtracted 9 from the ascii value
ADD R6,R6,#15                 ; adding 15 to R6 to convert hex to ascii
ADD R6,R6,#15                 ; adding 15 to R6 to convert hex to ascii
ADD R6,R6,#15                 ; adding 15 to R6 to convert hex to ascii
ADD R6,R6,#3                  ; adding 3 to R6 to convert hex to ascii
AND R0,R0,#0                  ; intitialize R0 to a value of 0
ADD R0,R0,R6                  ; place ascii value from R6 into R0
OUT                                          ; print value to monitor
AND R5,R5,#0                  ; intitialize R5 to a value of 0
ADD R2,R2,#-1                 ; decrement R2 counter by 1
BRp PRINT_NEX_NUM             ; if counter is positive then loop
AND R0,R0,#0                  ; intitialize R0 to a value of 0
ADD R0,R0,#10                 ; place ascii value of 10 into R0
OUT                                          ; print value to monitor
BRnzp BIGLOOP                 ; loop back to BIGLOOP
 
 
 
 
 
 
DONE   HALT                  ; done
