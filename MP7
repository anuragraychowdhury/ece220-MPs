#include "sudoku.h"
 
//-------------------------------------------------------------------------------------------------
// Start here to work on your MP7
//-------------------------------------------------------------------------------------------------
/*
*Name: Adam Shore
*Netid: ajshore2
*Partners: anuragr3
*
*Intro Paragraph:
* For  is_val_in_row I set a variable equal to 0. I then looped through each location at
* the given row and if the value at that location was equal to the test value I set the
* created variable to 1. After the loop, I used this variable to return 1 or 0 depending
* on if the value was already found in the row. For is_val_in_col I used the same
* method but looping through the col instead of the row. For is_val_in_3x3_zone I began
* by determining what the 3x3 starting row and col were depending on the given row and
* col. I then looped through each of the rows and cols determined and searched for the
* value. If the value was found I set a variable equal to 1 to track this. I then
* reterned a value depending on if the value was found or not. For is_val_valid I
* went through each of the previous functions and determined if the value was found.
* I marked this change by changing a variable from 0 to 1. If the value was found I
* returned 0 or else I returned 1. Finally, for solve_sudoku I began by looping
* through each row and col and seeing if a  location had no value. I used variable d
* to track if the sudoku had 0s in it and if it had a successful test value. If I
* found a location with no value I marked d to 0 and then began a new loop. This
* loop went through every test value from 1 to 9 and determined if it wsa valid for
* the given location. If it was, the location was set to the test value and the
* function was iterated. If the iteration was successful, d was set to 1. If it
* failed, the location was set back to 0 and the loop continued. At the end of the
* function d is returned so it could be used for the iteration step.
 *
*
*/
 
// You are free to declare any private functions if needed.
 
// Function: is_val_in_row
// Return true if "val" already existed in ith row of array sudoku.
int is_val_in_row(const int val, const int i, const int sudoku[9][9]) {
 
 
 assert(i>=0 && i<9);//checks that i is within boundaries of game board
 
 // BEG TODO
 
  int k = 0; //initialize integer to track if valid or not
 for(int s = 0; s<=8; s++){ // loop through each number in row
    if(sudoku[i][s]==val){ // test if number in row is equal to test value
      k=1; // if test value is found, set k equal to 1
    }
  }
 if(k==1){ //if k equals 1, signaling test value was found
    return 1; // return 1
  }
 else{ // else if value was not found
    return 0; // return 0
  }
 
 // END TODO
}
 
// Function: is_val_in_col
// Return true if "val" already existed in jth column of array sudoku.
int is_val_in_col(const int val, const int j, const int sudoku[9][9]) {
 
 assert(j>=0 && j<9);//checks that j is within boundaries of game board
 
 // BEG TODO
 
  int h = 0;//initialize h to track if valid or not
 for(int t = 0; t<=8; t++){//loop through each number in col
    if(sudoku[t][j]==val){//if value at col is equal to test value
      h=1;//set h to 1
    }
  }
 if(h==1){ // if h is 1, signaling test value was found in col
    return 1;//return 1
  }
 else{//if test value not found in col
    return 0;//return 0
  }
 
 // END TODO
}
 
// Function: is_val_in_3x3_zone
// Return true if val already existed in the 3x3 zone corresponding to (i, j)
int is_val_in_3x3_zone(const int val, const int i, const int j, const int sudoku[9][9]) {
  
  assert(i>=0 && i<9);//checks that i is within boundaries of game board
 
  // BEG TODO
 
  int v = 0;//initialize v to track is value is valud or not
 int a,b;//initialize a and b to represent starting positions to check 3x3
 if(i==0 || i==1 || i==2){//if row is 0 1 or 2
    a = 0;//start 3x3 at row 0
  }
 if(i==3 || i==4 || i==5){//if row is 3 4 or 5
    a = 3;//start 3x3 at row 3
  }
 if(i==6 || i==7 || i==8){//if row is 6 7 or 8
    a = 6;//start 3x3 at row 6
  }
 if(j==0 || j==1 || j==2){//if col is 0 1 or 2
    b = 0;//start 3x3 at col 0
  }
 if(j==3 || j==4 || j==5){//if col is 3 4 or 5
    b = 3;//start 3x3 at col 3
  }
 if(j==6 || j==7 || j==8){//if col is 6 7 or 8
    b = 6;//start 3x3 at col 6
  }
 for(int q = a; q<=a+2; q++){//loop through rows in 3x3
    for(int w = b; w<=b+2; w++){//loop through cols in 3x3
      if(sudoku[q][w]==val){//test if value is found at location a,b in 3x3
        v=1;//if value found, set v to 1
          }
      }
 
  }
 if(v==1){//if v is 1, signaling value was found in 3x3
    return 1;//return 1
  }
 else{//else if value was not found in 3x3
    return 0;//return 0
  }
 
 // END TODO
}
 
// Function: is_val_valid
// Return true if the val is can be filled in the given entry.
int is_val_valid(const int val, const int i, const int j, const int sudoku[9][9]) {
 
 assert(i>=0 && i<9 && j>=0 && j<9);//checks that i and j are within boundaries of game board
 
 // BEG TODO
 int p = 0;//initialize integer p to track if valid value or not
 if(is_val_in_row(val, i, sudoku)==1){//if value is already found in the row
    p=1;//set p to 1
  }
 if(is_val_in_col(val, j, sudoku)==1){//if value is already found in the col
    p=1;//set p to 1
  }
 if(is_val_in_3x3_zone(val, i, j, sudoku)==1){//if value is already found in the 3x3
    p=1;//set p to 1
  }
 if(p==1){//if value was found in conflicting location
    return 0;//return 0
  }
 else{//if value is in valid location
    return 1;//return 1
  }
 
 // END TODO
}
 
// Procedure: solve_sudoku
// Solve the given sudoku instance.
int solve_sudoku(int sudoku[9][9]) {
 
 // BEG TODO.
 int i,j;//initialize i and j to track test locations
 int a,b;//initialize a and b to hold location that contains 0
 int d = 1;//set d to 1 to represent a valid placement in the board
 int num;//initialize num to hold test value for locations
 for(i=0; i<9; i++){//loop through rows
    for(j=0; j<9; j++){//loop through cols
      if(sudoku[i][j] == 0){//if location is 0
        a=i;//a holds row i
        b=j;//b holds col j
        d=0;//d set to 0 to signal board is not complete
      }
    }
  }
 if(d==0){//if value of 0 found on board
    for(num = 1; num<=9; num++){//loop through each possible test value
      if(is_val_valid(num, a, b, sudoku)==1){//if test value is valid at location a,b
        sudoku[a][b]=num;//set location value to value of num
        if(solve_sudoku(sudoku)==1){//if next iteration is a success
          d=1;//set d to 1 to mark successful board
        }
        else{//if next iteration fails
          sudoku[a][b]=0;//set location back to 0
        }
      }
    }
  }
   
    
 
 
 return d;//return value of d status of the board
 // END TODO.
}
 
// Procedure: print_sudoku
void print_sudoku(int sudoku[9][9])
{
 int i, j;
 for(i=0; i<9; i++) {
    for(j=0; j<9; j++) {
      printf("%2d", sudoku[i][j]);
    }
    printf("\n");
  }
}
 
// Procedure: parse_sudoku
void parse_sudoku(const char fpath[], int sudoku[9][9]) {
  FILE *reader = fopen(fpath, "r");
 assert(reader != NULL);
 int i, j;
 for(i=0; i<9; i++) {
    for(j=0; j<9; j++) {
      fscanf(reader, "%d", &sudoku[i][j]);
    }
  }
 fclose(reader);
}
 
