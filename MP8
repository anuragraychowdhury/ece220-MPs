#include "game.h"
 
/*
Name:anuragr3
Partners: ajshore2
this is 2048 in the terminal for c. the w,a,s,d functions were all variants of eachother in one way or another.
make game creates the grid that will be playted on and remake takes in the user input. get cell works with the individual cells.
there is a final funciton that checks if any more moves can be made and the destory function remains untouched.
*/
 
 
game * make_game(int rows, int cols)
/*! Create an instance of a game structure with the given number of rows
and columns, initializing elements to -1 and return a pointer
to it. (See game.h for the specification for the game data structure)
 The needed memory should be dynamically allocated with the malloc family
of functions.
*/
{
//Dynamically allocate memory for game and cells (DO NOT modify this)
game * mygame = malloc(sizeof(game));
mygame->cells = malloc(rows*cols*sizeof(cell));
 
//YOUR CODE STARTS HERE:
 
 //variable initialization
                mygame -> rows = rows;
                mygame -> cols = cols;
                for(int i = 0; i < rows * cols; i++)
 {
                  mygame->cells[i] = -1; //once slots are set as -1, they are considered empty (once one is added, they are zero).
                }
 
 
return mygame;
}
 
void remake_game(game ** _cur_game_ptr,int new_rows,int new_cols)
/*! Given a game structure that is passed by reference, change the
                game structure to have the given number of rows and columns. Initialize
                the score and all elements in the cells to -1. Make sure that any
                memory previously allocated is not lost in this function. 
*/
{
                /*Frees dynamically allocated memory used by cells in previous game,
                then dynamically allocates memory for cells in new game. DO NOT MODIFY.*/
                free((*_cur_game_ptr)->cells);
                (*_cur_game_ptr)->cells = malloc(new_rows*new_cols*sizeof(cell));
 
                //YOUR CODE STARTS HERE:
 
 //remake game function requires reinitializtion of variables based on the demonsions; hence the presence of new variables new_rows and new_cols
                (* _cur_game_ptr) -> rows = new_rows;
               
(* _cur_game_ptr) -> cols = new_cols;
               
(* _cur_game_ptr) -> score = 0; //score is also initialized to zero
                for(int i = 0; i < (new_rows * new_cols); i++ )
 {
                (* _cur_game_ptr) -> cells[i] = -1; //once again, cells are set to -1 to be empty
}             
                return; 
}
 
void destroy_game(game * cur_game)
/*! Deallocate any memory acquired with malloc associated with the given game instance.
This includes any substructures the game data structure contains. Do not modify this function.*/
{
free(cur_game->cells);
free(cur_game);
cur_game = NULL;
return;
}
 
cell * get_cell(game * cur_game, int row, int col)
/*! Given a game, a row, and a column, return a pointer to the corresponding
cell on the game. (See game.h for game data structure specification)
This function should be handy for accessing game cells. Return NULL
                if the row and col coordinates do not exist.
*/
{
               
//YOUR CODE STARTS HERE
                int colm = cur_game->cols;
 
  if(row > 0 || col > 0 || row < cur_game->rows || col < cur_game->cols)
 {
                   return &(cur_game->cells[row*colm + col]);
                }
 
      return NULL;
} //loop essentially just checks if the rows and columns are in the appropriate bounds
 
int move_w(game * cur_game)
/*!Slides all of the tiles in cur_game upwards. If a tile matches with the
 one above it, the tiles are merged by adding their values together. When
tiles merge, increase the score by the value of the new tile. A tile can
 not merge twice in one turn. If sliding the tiles up does not cause any
 cell to change value, w is an invalid move and return 0. Otherwise, return 1.
*/
{
 
//YOUR CODE STARTS HERE
                int rowTrack = cur_game->rows; //variables for row iterations
                int colTrack = cur_game->cols; //variables for columns iterations
                int check = 0; //board status is checked through "check;" initialized here to 0
               
for(int i = 0; i < colTrack; i++)
 {
                  int rowprev = -1;
                  for(int j = 1; j < rowTrack; j++)//reviews rows that are being tracked at that given moment; reduced duplicate chances
   {
                   if(cur_game->cells[j*colTrack+i] != -1)
    {
                    int firstSlot = 0;
                    while(firstSlot < j)
 {
                if(cur_game->cells[firstSlot*colTrack+i] == -1) //runs when the cell is full
{
                  break; //breaks from loop to enable switch into else
                }
   else
 {
                     firstSlot++; //increments row to next row value
                }
               
                }
               
                if( firstSlot < j) //deals with first row at hand and checks whether the first value is smaller than j
{
                 cur_game->cells[firstSlot*colTrack+i] = cur_game->cells[j*colTrack+i];
                   cur_game->cells[j*colTrack+i] = -1;
                     check = 1;
                } //works on moving the actual cells themselves in the terminals
               
                if(rowprev != firstSlot-1) //selects row to operate on
 {
                 if(cur_game->cells[(firstSlot-1)*colTrack+i] == cur_game->cells[firstSlot*colTrack+i])
  {
                   cur_game->cells[(firstSlot-1)*colTrack+i] = cur_game->cells[(firstSlot-1)*colTrack+i] + cur_game->cells[firstSlot*colTrack+i];          
                     rowprev = firstSlot-1;
   //rows are updated and stored in memory for further operation
                      
   cur_game->score +=cur_game->cells[(firstSlot-1)*colTrack+i];
                      cur_game->cells[firstSlot*colTrack+i] = -1;
          check = 1;// status board is updated
                }
 
                }
               
                }
                }
 
                }
                if(check == 0)
 {
                return 0;
                }
  return 1;
};//if else statement to determine whether the status board was updated or not (returns true or false)
 
int move_s(game * cur_game) //slide down
{
//YOUR CODE STARTS HERE
                int rowTrack = cur_game->rows;
                int colTrack = cur_game->cols;
                int check = 0;
               
for( int i = 0; i < colTrack; i++)
 {
                   int rowprev = -1;
                      for(int j = rowTrack-1; j >=0; j--)
       {
                         if(cur_game->cells[j*colTrack+i] != -1) //reviews merged values line under tries to find -1 (empty) slots by looping through the rows and columns
          {
                            int firstSlot = rowTrack-1;
              while(firstSlot > j)
               {
if(cur_game->cells[firstSlot*colTrack+i] == -1)
{
break;
}
else
{
                firstSlot--; //decrement smallest value if no empty slots found
}
               
                }
               
if( firstSlot > j)
{
                cur_game->cells[firstSlot*colTrack+i] = cur_game->cells[j*colTrack+i];
                   cur_game->cells[j*colTrack+i] = -1;
                     check = 1;
}
                if(rowprev != firstSlot+1)
 {
                   if(cur_game->cells[(firstSlot+1)*colTrack+i] == cur_game->cells[firstSlot*colTrack+i])
    {
                      cur_game->cells[(firstSlot+1)*colTrack+i] = cur_game->cells[(firstSlot+1)*colTrack+i] + cur_game->cells[firstSlot*colTrack+i];
               rowprev = firstSlot+1;
                          cur_game->score +=cur_game->cells[(firstSlot+1)*colTrack+i];
                            cur_game->cells[firstSlot*colTrack+i] = -1;
                              check = 1; //board is updated in terms of what rows and columns are being used and score board as well
                }
 
                }
               
                }
                }
 
                }
                if(check == 0)
 {
                   return 0;
                }
    return 1; //checks for non computational moves
 
};
 
int move_a(game * cur_game) //slide left
{
//YOUR CODE STARTS HERE
                int rowTrack = cur_game->rows;
                int colTrack = cur_game->cols;
                int check = 0;
//same variables are used throughout the sliding functions (note moving forward)
                for( int i = 0; i < rowTrack; i++)
 {
                     int rowprev = -1;
                       for(int j = 1; j < colTrack; j++)
        { // Loop through collumns
                         if(cur_game->cells[i*colTrack+j] != -1)
           {
                            int firstSlot = 0;
                              while(firstSlot < j)
               {
if(cur_game->cells[i*colTrack+firstSlot] == -1) //runs through columns and rows to find the next (-1) element (empty cell).
{
break;
}
 
else
{
firstSlot++; //increments if the empty cell is not found to next row
}             
 
}
               
                if( firstSlot < j)
 {
                   cur_game->cells[i*colTrack+firstSlot] = cur_game->cells[i*colTrack+j];
                      cur_game->cells[i*colTrack+j] = -1;
                        check = 1;
                }//moves towards empty cells
               
                if(rowprev != firstSlot-1)
 {
                    if(cur_game->cells[i*colTrack+(firstSlot-1)] == cur_game->cells[i*colTrack+firstSlot])
       {
                         cur_game->cells[i*colTrack+(firstSlot-1)] = cur_game->cells[i*colTrack+(firstSlot-1)] + cur_game->cells[i*colTrack+firstSlot];          
                           rowprev = firstSlot-1;
                             cur_game->score +=cur_game->cells[i*colTrack+(firstSlot-1)];
                               cur_game->cells[i*colTrack+firstSlot] = -1;
                                  check = 1; //updates most recently used row values
                }
 
                }
               
                }
                }
 
                }
                if(check == 0)
 {
                return 0;
                }
return 1;
//checks for invalid movements
};
 
int move_d(game * cur_game){ //slide to the right
               
//YOUR CODE STARTS HERE
                int rowTrack = cur_game->rows;
                int colTrack = cur_game->cols;
                int check = 0;
 
for(int i = 0; i < rowTrack; i++)
 {
                   int rowprev = -1;
                     for(int j = colTrack-1; j >=0; j--)
      {
                       if(cur_game->cells[i*colTrack+j] != -1)
         {
                          int firstSlot = colTrack-1;
                          while(firstSlot > j)
           { //traverses through rows and columns
if(cur_game->cells[i*colTrack+firstSlot] == -1)
{
break;
}
else
{
firstSlot--; //goes right towards empty values
}
               
                }
               
                if( firstSlot > j)
 {
                  cur_game->cells[i*colTrack+firstSlot] = cur_game->cells[i*colTrack+j];
                    cur_game->cells[i*colTrack+j] = -1;
                      check = 1;
                }
               
                if(rowprev != firstSlot+1)
 {
                     if(cur_game->cells[i*colTrack+(firstSlot+1)] == cur_game->cells[i*colTrack+firstSlot])
      {
                       cur_game->cells[i*colTrack+(firstSlot+1)] = cur_game->cells[i*colTrack+(firstSlot+1)] + cur_game->cells[i*colTrack+firstSlot];          
                       rowprev = firstSlot+1;
                       cur_game->score +=cur_game->cells[i*colTrack+(firstSlot+1)];
                       cur_game->cells[i*colTrack+firstSlot] = -1;
                       check = 1;
      } //merges unmerged cells together
 
                }
               
                }
                }
 
                }
 
                if(check == 0)
 {
                return 0;
                }
return 1;
 
 
};
 
int legal_move_check(game * cur_game)
/*! Given the current game check if there are any legal moves on the board. There are
no legal moves if sliding in any direction will not cause the game to change.
                Return 1 if there are possible legal moves, 0 if there are none.
*/
{
//YOUR CODE STARTS HERE
                int rowTrack = cur_game->rows;
                int colTrack = cur_game->cols;
                for(int i = 0; i < rowTrack; i++)
 {
                   for(int j = 0; j < colTrack; j++) //iterates through array columns and rows
    {
     if(cur_game->cells[i*colTrack+j] == -1)
     {
                     return 1;
                }
     // conditional statements to check if the game can continue to run
                if(i+1 < rowTrack * colTrack && (cur_game->cells[i*colTrack+j] == cur_game->cells[(i+1)*colTrack+j]))
 {
                return 1; //checks if right value can be merged
                }
                if(i-1 > 0 && (cur_game->cells[i*colTrack+j] == cur_game->cells[(i-1)*colTrack+j]))
 {
                return 1;
                } //checks if left value can be merged
 
                if(j+1 < rowTrack * colTrack && (cur_game->cells[i*colTrack+j] == cur_game->cells[i*colTrack+(j+1)]))
 {
                return 1;
                } //checks if top value can be merged
    
                if(j-1 > 0 && (cur_game->cells[i*colTrack+j] == cur_game->cells[i*colTrack+(j-1)]))
 {
                return 1;
                }
                //checks if bottom value can be merged
                }
                }
return 0;
}//game over
 
 
/*! code below is provided and should not be changed */
 
void rand_new_tile(game * cur_game)
/*! insert a new tile into a random empty cell. First call rand()%(rows*cols) to get a random value between 0 and (rows*cols)-1.
*/
{
               
                cell * cell_ptr;
cell_ptr = cur_game->cells;
               
if (cell_ptr == NULL){
 printf("Bad Cell Pointer.\n");
exit(0);
}
               
               
                //check for an empty cell
                int emptycheck = 0;
                int i;
               
                for(i = 0; i < ((cur_game->rows)*(cur_game->cols)); i++){
                if ((*cell_ptr) == -1){
               
                emptycheck = 1;
                break;
                }
               
cell_ptr += 1;
                }
                if (emptycheck == 0){
               
                printf("Error: Trying to insert into no a board with no empty cell. The function rand_new_tile() should only be called after tiles have succesfully moved, meaning there should be at least 1 open spot.\n");
                exit(0);
                }
               
int ind,row,col;
                int num;
do{
                ind = rand()%((cur_game->rows)*(cur_game->cols));
                col = ind%(cur_game->cols);
                row = ind/cur_game->cols;
} while ( *get_cell(cur_game, row, col) != -1);
//*get_cell(cur_game, row, col) = 2;
                num = rand()%20;
                if(num <= 1){
                *get_cell(cur_game, row, col) = 4; // 1/10th chance
                }
                else{
                *get_cell(cur_game, row, col) = 2;// 9/10th chance
                }
}
 
int print_game(game * cur_game)
{
cell * cell_ptr;
cell_ptr = cur_game->cells;
 
int rows = cur_game->rows;
int cols = cur_game->cols;
int i,j;
               
                printf("\n\n\nscore:%d\n",cur_game->score);
               
               
                printf("\u2554"); // topleft box char
                for(i = 0; i < cols*5;i++)
                printf("\u2550"); // top box char
                printf("\u2557\n"); //top right char
               
               
 for(i = 0; i < rows; i++){
                printf("\u2551"); // side box char
for(j = 0; j < cols; j++){
if ((*cell_ptr) == -1 ) { //print asterisks
printf(" ** ");
 }
else {
switch( *cell_ptr ){ //print colored text
case 2:
printf("\x1b[1;31m%04d\x1b[0m ",(*cell_ptr));
break;
case 4:
printf("\x1b[1;32m%04d\x1b[0m ",(*cell_ptr));
break;
case 8:
printf("\x1b[1;33m%04d\x1b[0m ",(*cell_ptr));
break;
case 16:
printf("\x1b[1;34m%04d\x1b[0m ",(*cell_ptr));
break;
case 32:
printf("\x1b[1;35m%04d\x1b[0m ",(*cell_ptr));
break;
case 64:
printf("\x1b[1;36m%04d\x1b[0m ",(*cell_ptr));
break;
case 128:
printf("\x1b[31m%04d\x1b[0m ",(*cell_ptr));
break;
case 256:
printf("\x1b[32m%04d\x1b[0m ",(*cell_ptr));
break;
case 512:
printf("\x1b[33m%04d\x1b[0m ",(*cell_ptr));
break;
case 1024:
printf("\x1b[34m%04d\x1b[0m ",(*cell_ptr));
break;
case 2048:
printf("\x1b[35m%04d\x1b[0m ",(*cell_ptr));
break;
case 4096:
printf("\x1b[36m%04d\x1b[0m ",(*cell_ptr));
break;
case 8192:
printf("\x1b[31m%04d\x1b[0m ",(*cell_ptr));
break;
                default:
                printf(" X ");
 
}
 
}
cell_ptr++;
}
                printf("\u2551\n"); //print right wall and newline
}
               
                printf("\u255A"); // print bottom left char
                for(i = 0; i < cols*5;i++)
                printf("\u2550"); // bottom char
                printf("\u255D\n"); //bottom right char
               
return 0;
}
 
int process_turn(const char input_char, game* cur_game) //returns 1 if legal move is possible after input is processed
{
                int rows,cols;
                char buf[200];
                char garbage[2];
int move_success = 0;
               
switch ( input_char ) {
case 'w':
move_success = move_w(cur_game);
break;
case 'a':
move_success = move_a(cur_game);
break;
case 's':
move_success = move_s(cur_game);
break;
case 'd':
move_success = move_d(cur_game);
break;
case 'q':
destroy_game(cur_game);
printf("\nQuitting..\n");
return 0;
break;
                case 'n':
                //get row and col input for new game
                dim_prompt: printf("NEW GAME: Enter dimensions (rows columns):");
                while (NULL == fgets(buf,200,stdin)) {
                printf("\nProgram Terminated.\n");
                return 0;
                }
               
                if (2 != sscanf(buf,"%d%d%1s",&rows,&cols,garbage) ||
                rows < 0 || cols < 0){
                printf("Invalid dimensions.\n");
                goto dim_prompt;
                }
               
                remake_game(&cur_game,rows,cols);
               
                move_success = 1;
               
default: //any other input
printf("Invalid Input. Valid inputs are: w, a, s, d, q, n.\n");
}
 
               
               
               
if(move_success == 1){ //if movement happened, insert new tile and print the game.
rand_new_tile(cur_game);
                print_game(cur_game);
}
 
if( legal_move_check(cur_game) == 0){ //check if the newly spawned tile results in game over.
printf("Game Over!\n");
return 0;
}
return 1;
}
